{"version":3,"sources":["App.css","Person/Person.js","App.js","serviceWorker.js","index.js","Person/Person.css"],"names":["module","exports","App","red","bold","Black","person","props","react_default","a","createElement","className","classes","Person","onClick","click","name","pet","children","type","onChange","changed","value","state","persons","id","mainButtonHandler","newName","_this","setState","secondState","showPersons","nameChangeHandler","event","personIndex","findIndex","p","Object","objectSpread","target","toConsumableArray","togglePersonsVisibleHandler","doesShow","deletePersonHandler","index","splice","_this2","this","buttonClass","map","Person_Person","key","assignedClasses","length","push","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7541c2d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3Ge-C\",\"red\":\"App__red__eyQdf\",\"bold\":\"App__bold__1gKsH\",\"Black\":\"App__Black__1Ikjt\"};","import React from 'react';\r\n\r\nimport classes from './Person.css';\r\n\r\nconst person = (props) => {\r\n    return (\r\n        <div className={classes.Person}>\r\n            <p onClick={props.click}>This is a Person Component: This person is called {props.name}, and they own a {props.pet}.</p> {/* can also mess around with this: {Math.round(Math.random()*10)} is {Math.round(Math.random()*100)} years old*/}\r\n            <p>Description of Pet: {props.children}</p>\r\n            <input type=\"input\" onChange={props.changed} value={props.name} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport classes from './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n    state = {\n        persons: [ //this is an array we are declaring inside state.\n            {id: '1', name: 'Cole', pet: 'Pug'},\n            {id: '2', name: 'Summer', pet: 'Holly'},\n            {id: '3', name: 'Reidy', pet: 'italian woG'}\n        ]\n    }\n\n    mainButtonHandler = (newName) => {\n        //alert(\"Thank you for clicking me sir.\");\n        this.setState( {\n            persons: [\n                {name: 'Cole', pet: 'Goldfish'},\n                {name: 'Summer', pet: 'Big Momma'},\n                {name: newName, pet: 'miloaf'}\n            ],\n            secondState: 'This is a second state (I have no idea why this is defined!)',\n            showPersons: false \n        } )\n    }\n\n    nameChangeHandler = (event, id) => {\n        const personIndex = this.state.persons.findIndex(p => {\n            return p.id === id;\n        });\n\n        const person = {\n            ...this.state.persons[personIndex]\n        };\n        \n        person.name = event.target.value;\n        \n        const persons = [...this.state.persons];\n        persons[personIndex] = person;\n\n        this.setState({persons: persons})\n\n        //old way of doing it before dynamic updating in the render():\n\n        // this.setState({\n        //     persons: [\n        //         {name: 'Cole', pet: 'Pug'},\n        //         {name: event.target.value, pet: 'Holly'},\n        //         {name: 'Reidy', pet: 'italian woG'}\n        //     ]\n        // })\n    }\n\n    togglePersonsVisibleHandler = () => {\n        const doesShow = this.state.showPersons;\n        this.setState({showPersons: !doesShow}); //just toggling true/false on showPersons boolean in state.\n    }\n\n    deletePersonHandler = (index) => {\n        //const persons = this.state.persons.slice();\n        const persons = [...this.state.persons]; //this works exact same as above line but is the most modern ES6 way of doing things.\n        persons.splice(index, 1) //just removes the single array element at index value passed in\n        this.setState({persons: persons})\n    }\n\n    render() {\n        // old initialisation of a javascript object (json format)\n        // const style = {\n            // backgroundColor: 'grey',\n            // color: 'white',\n            // font: 'inherit',\n            // width: '200px',\n            // cursor: 'pointer', \n            // border: '1px solid black',\n            // padding: '8px'\n        // };\n\n        let persons = null;\n        let buttonClass = '';\n        \n        if (this.state.showPersons) {\n            persons = (\n                <div>\n                    {this.state.persons.map((person, index) => {\n                        return <Person \n                            name={person.name}\n                            pet={person.pet}\n                            click={() => this.deletePersonHandler(index)}\n                            key={person.id}\n                            changed={(event) => this.nameChangeHandler(event, person.id)}/>\n                    })}\n\n                    {/* This is the old way of listing each individual Person component, and then the contents of persons array above gets rendered to each one. Now, instead\n                    we are just mapping each value in the array of our personal data for each Person above using .map() to each <Person> component as you see in the line above. */}\n                    {/* <Person \n                        name={this.state.persons[0].name} \n                        pet={this.state.persons[0].pet} />\n                    <Person\n                        name={this.state.persons[1].name} \n                        pet={this.state.persons[1].pet}\n                        click={this.mainButtonHander.bind(this, \"yeeeet\")}\n                        changed={this.nameChangeHandler}>Holly is a BIG girl</Person> {/*see how we pass this plain text in to person and how we use it within the person component }\n                    <Person \n                        name={this.state.persons[2].name} \n                        pet={this.state.persons[2].pet} \n                        click={this.mainButtonHander.bind(this, 'Uncle Pete')}>pleasa some fooda</Person>\n\n                    {/*\n                    This is the layout we used before using state:\n                    <Person name=\"Cole\" pet=\"Pug\" />\n                    <Person name=\"Summer\" pet=\"Holly\">Holly is a BIG girl</Person> {see how we pass this plain text in to person and how we use it within the person component }\n                    <Person name=\"Reidy\" pet=\"italian dog\" /> \n                    */}\n                </div>\n            );\n\n            buttonClass = classes.Black;\n        }\n\n        const assignedClasses = [];\n        if (this.state.persons.length < 3) {\n            assignedClasses.push(classes.red)\n        }\n        if (this.state.persons.length < 2) {\n            assignedClasses.push(classes.bold) //so basically we are legit just adding values to this class which are going to be id's of CSS effects we want to add onto the button.\n        }\n\n        return (\n            <div className={classes.App}>\n                <h1>Sup lads</h1>\n                <p className={assignedClasses.join(' ')}> {/*this is just converting the array of [red, bold] to a single string \"red bold\" */}\n                    its ya boy cole here\n                </p>\n                <button\n                    className={buttonClass}\n                    onClick={this.togglePersonsVisibleHandler}>Click me!\n                </button>\n                {persons}\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__17ToL\"};"],"sourceRoot":""}